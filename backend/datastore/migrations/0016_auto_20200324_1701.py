# Generated by Django 3.0.4 on 2020-03-24 17:01
from django.core.exceptions import ValidationError
from django.db import migrations


class Migration(migrations.Migration):
    def forwards_func(apps, schema_editor):
        import requests

        ZIPCode = apps.get_model("datastore", "ZIPCode")
        County = apps.get_model("datastore", "County")
        Report = apps.get_model("datastore", "Report")

        for report in Report.objects.all().iterator():
            try:
                zip_code = ZIPCode.objects.get(zip_code=report.zip_code_str)
            except ZIPCode.DoesNotExist:
                zip_code = ZIPCode(zip_code=report.zip_code_str)

            # geo code zip
            geo_coding_response = requests.get(
                "https://nominatim.openstreetmap.org/search",
                params={
                    "country": "DE",
                    "postalcode": report.zip_code_str,
                    "addressdetails": 1,
                    "format": "json",
                },
            )

            geo_coding_response.raise_for_status()
            geo_coding_response = geo_coding_response.json()
            geo_coding_response = [
                c for c in geo_coding_response if c.get("osm_type") != "relation"
            ]
            if not len(geo_coding_response):
                raise ValidationError(
                    f"No geocoding info for zip={report.zip_code_str} found"
                )

            # geo code county
            geo_coding_response = geo_coding_response[0]
            county_name = (
                geo_coding_response["address"].get("county")
                or geo_coding_response["address"]["city"]
            )
            geo_coding_response = requests.get(
                "https://nominatim.openstreetmap.org/search",
                params={"country": "DE", "county": county_name, "format": "json",},
            )

            geo_coding_response.raise_for_status()
            geo_coding_response = geo_coding_response.json()
            if not len(geo_coding_response):
                raise ValidationError(
                    f"No geocoding info for county={county_name} found"
                )

            position = geo_coding_response[0]
            county, created = County.objects.get_or_create(
                name=county_name,
                defaults={"latitude": position["lat"], "longitude": position["lon"]},
            )

            zip_code.county = county
            zip_code.save()
            report.zip_code = zip_code
            report.save()

    dependencies = [
        ("datastore", "0015_auto_20200324_1448"),
    ]

    operations = [
        migrations.RunPython(forwards_func),
    ]
